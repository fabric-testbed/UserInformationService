# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PortalKey(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pubkey: str=None, privkey: str=None, created_on: str=None, expires_on: str=None, project: str=None):  # noqa: E501
        """PortalKey - a model defined in Swagger

        :param pubkey: The pubkey of this PortalKey.  # noqa: E501
        :type pubkey: str
        :param privkey: The privkey of this PortalKey.  # noqa: E501
        :type privkey: str
        :param created_on: The created_on of this PortalKey.  # noqa: E501
        :type created_on: str
        :param expires_on: The expires_on of this PortalKey.  # noqa: E501
        :type expires_on: str
        :param project: The project of this PortalKey.  # noqa: E501
        :type project: str
        """
        self.swagger_types = {
            'pubkey': str,
            'privkey': str,
            'created_on': str,
            'expires_on': str,
            'project': str
        }

        self.attribute_map = {
            'pubkey': 'pubkey',
            'privkey': 'privkey',
            'created_on': 'createdOn',
            'expires_on': 'expiresOn',
            'project': 'project'
        }
        self._pubkey = pubkey
        self._privkey = privkey
        self._created_on = created_on
        self._expires_on = expires_on
        self._project = project

    @classmethod
    def from_dict(cls, dikt) -> 'PortalKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PortalKey of this PortalKey.  # noqa: E501
        :rtype: PortalKey
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pubkey(self) -> str:
        """Gets the pubkey of this PortalKey.


        :return: The pubkey of this PortalKey.
        :rtype: str
        """
        return self._pubkey

    @pubkey.setter
    def pubkey(self, pubkey: str):
        """Sets the pubkey of this PortalKey.


        :param pubkey: The pubkey of this PortalKey.
        :type pubkey: str
        """

        self._pubkey = pubkey

    @property
    def privkey(self) -> str:
        """Gets the privkey of this PortalKey.


        :return: The privkey of this PortalKey.
        :rtype: str
        """
        return self._privkey

    @privkey.setter
    def privkey(self, privkey: str):
        """Sets the privkey of this PortalKey.


        :param privkey: The privkey of this PortalKey.
        :type privkey: str
        """

        self._privkey = privkey

    @property
    def created_on(self) -> str:
        """Gets the created_on of this PortalKey.


        :return: The created_on of this PortalKey.
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on: str):
        """Sets the created_on of this PortalKey.


        :param created_on: The created_on of this PortalKey.
        :type created_on: str
        """

        self._created_on = created_on

    @property
    def expires_on(self) -> str:
        """Gets the expires_on of this PortalKey.


        :return: The expires_on of this PortalKey.
        :rtype: str
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on: str):
        """Sets the expires_on of this PortalKey.


        :param expires_on: The expires_on of this PortalKey.
        :type expires_on: str
        """

        self._expires_on = expires_on

    @property
    def project(self) -> str:
        """Gets the project of this PortalKey.


        :return: The project of this PortalKey.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project: str):
        """Sets the project of this PortalKey.


        :param project: The project of this PortalKey.
        :type project: str
        """

        self._project = project
