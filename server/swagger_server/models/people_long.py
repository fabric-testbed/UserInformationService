# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.preferences import Preferences  # noqa: F401,E501
from swagger_server import util


class PeopleLong(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, name: str=None, email: str=None, eppn: str=None, oidc_claim_sub: str=None, bastion_login: str=None, prefs: Preferences=None):  # noqa: E501
        """PeopleLong - a model defined in Swagger

        :param uuid: The uuid of this PeopleLong.  # noqa: E501
        :type uuid: str
        :param name: The name of this PeopleLong.  # noqa: E501
        :type name: str
        :param email: The email of this PeopleLong.  # noqa: E501
        :type email: str
        :param eppn: The eppn of this PeopleLong.  # noqa: E501
        :type eppn: str
        :param oidc_claim_sub: The oidc_claim_sub of this PeopleLong.  # noqa: E501
        :type oidc_claim_sub: str
        :param bastion_login: The bastion_login of this PeopleLong.  # noqa: E501
        :type bastion_login: str
        :param prefs: The prefs of this PeopleLong.  # noqa: E501
        :type prefs: Preferences
        """
        self.swagger_types = {
            'uuid': str,
            'name': str,
            'email': str,
            'eppn': str,
            'oidc_claim_sub': str,
            'bastion_login': str,
            'prefs': Preferences
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'email': 'email',
            'eppn': 'eppn',
            'oidc_claim_sub': 'oidc_claim_sub',
            'bastion_login': 'bastion_login',
            'prefs': 'prefs'
        }
        self._uuid = uuid
        self._name = name
        self._email = email
        self._eppn = eppn
        self._oidc_claim_sub = oidc_claim_sub
        self._bastion_login = bastion_login
        self._prefs = prefs

    @classmethod
    def from_dict(cls, dikt) -> 'PeopleLong':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The People_long of this PeopleLong.  # noqa: E501
        :rtype: PeopleLong
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this PeopleLong.


        :return: The uuid of this PeopleLong.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this PeopleLong.


        :param uuid: The uuid of this PeopleLong.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> str:
        """Gets the name of this PeopleLong.


        :return: The name of this PeopleLong.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PeopleLong.


        :param name: The name of this PeopleLong.
        :type name: str
        """

        self._name = name

    @property
    def email(self) -> str:
        """Gets the email of this PeopleLong.


        :return: The email of this PeopleLong.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this PeopleLong.


        :param email: The email of this PeopleLong.
        :type email: str
        """

        self._email = email

    @property
    def eppn(self) -> str:
        """Gets the eppn of this PeopleLong.


        :return: The eppn of this PeopleLong.
        :rtype: str
        """
        return self._eppn

    @eppn.setter
    def eppn(self, eppn: str):
        """Sets the eppn of this PeopleLong.


        :param eppn: The eppn of this PeopleLong.
        :type eppn: str
        """

        self._eppn = eppn

    @property
    def oidc_claim_sub(self) -> str:
        """Gets the oidc_claim_sub of this PeopleLong.


        :return: The oidc_claim_sub of this PeopleLong.
        :rtype: str
        """
        return self._oidc_claim_sub

    @oidc_claim_sub.setter
    def oidc_claim_sub(self, oidc_claim_sub: str):
        """Sets the oidc_claim_sub of this PeopleLong.


        :param oidc_claim_sub: The oidc_claim_sub of this PeopleLong.
        :type oidc_claim_sub: str
        """

        self._oidc_claim_sub = oidc_claim_sub

    @property
    def bastion_login(self) -> str:
        """Gets the bastion_login of this PeopleLong.


        :return: The bastion_login of this PeopleLong.
        :rtype: str
        """
        return self._bastion_login

    @bastion_login.setter
    def bastion_login(self, bastion_login: str):
        """Sets the bastion_login of this PeopleLong.


        :param bastion_login: The bastion_login of this PeopleLong.
        :type bastion_login: str
        """

        self._bastion_login = bastion_login

    @property
    def prefs(self) -> Preferences:
        """Gets the prefs of this PeopleLong.


        :return: The prefs of this PeopleLong.
        :rtype: Preferences
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs: Preferences):
        """Sets the prefs of this PeopleLong.


        :param prefs: The prefs of this PeopleLong.
        :type prefs: Preferences
        """

        self._prefs = prefs
